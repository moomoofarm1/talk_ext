[{"path":"https://r-talk.org/articles/talk.html","id":"talkembed-mapping-audio-recordings-to-numbers-using-a-huggingface-language-model","dir":"Articles","previous_headings":"","what":"talkEmbed(): mapping audio recordings to numbers using a HuggingFace language model","title":"Getting started","text":"talkEmbed() function transforms audio recording files embeddings. example data used tutorial comes participants described harmony life satisfaction life text response, 10 descriptive words rating scales.","code":"library(talk)  # work in progress"},{"path":"https://r-talk.org/articles/talk.html","id":"articles-related-to-the-talk-package","dir":"Articles","previous_headings":"","what":"Articles related to the talk-package","title":"Getting started","text":"WhiSPA: Semantically Psychologically Aligned Whisper Self-Supervised Contrastive Student-Teacher Learning Rajath Rao, Adithya V Ganesan, Oscar Kjell, Jonah Luby, Akshay Raghavan, Scott M. Feltman, Whitney Ringwald, Ryan L. Boyd, Benjamin J. Luft, Camilo J. Ruggero, Neville Ryant, ROMAN KOTOV, H. Schwartz","code":""},{"path":"https://r-talk.org/articles/talk_huggingface_in_r_extended_installation_guide.html","id":"conda-environment","dir":"Articles","previous_headings":"","what":"Conda environment","title":"Extended Installation Guide","text":"","code":"library(talk) library(reticulate)  # Install text required python packages in a conda environment (with defaults). text::talkrpp_install()  # Show available conda environments. reticulate::conda_list()  # Initialize the installed conda environment. # save_profile = TRUE saves the settings so that you don't have to run textrpp_initialize() after restarting R.  text::talkrpp_initialize(save_profile = TRUE)  # Test so that the text package work. wav_path <- system.file(\"extdata/\",                         \"test_short.wav\",                         package = \"talk\") wav_path  emb_test <- talk::talkEmbed(   talk_filepaths = wav_path )"},{"path":"https://r-talk.org/articles/talk_huggingface_in_r_extended_installation_guide.html","id":"solving-omp-errors-and-rrstudio-crashes","dir":"Articles","previous_headings":"","what":"Solving OMP errors and R/Rstudio crashes","title":"Extended Installation Guide","text":"Recently text users (mainly Mac), experienced OMP errors - RStudio R crashes. happening found following solutions now:","code":"Sys.setenv(OMP_NUM_THREADS = \"1\") #Limit the number of threads to prevent conflicts.  Sys.setenv(OMP_MAX_ACTIVE_LEVELS = \"1\")   # Also might have to restart R .rs.restartR()  # If above does not work, you can also try this; although this solution might have some risks assocaited with it (for more information see https://github.com/dmlc/xgboost/issues/1715) Sys.setenv(KMP_DUPLICATE_LIB_OK = \"TRUE\") #Temporarily allows execution despite duplicate OpenMP libraries.  ### This is how you can unset the settings Sys.unsetenv(\"OMP_NUM_THREADS\") Sys.unsetenv(\"OMP_MAX_ACTIVE_LEVELS\") Sys.unsetenv(\"KMP_DUPLICATE_LIB_OK\")  # This is how you can verify the settings print(Sys.getenv(\"DYLD_LIBRARY_PATH\"))   # Please let us know if you find any other solutions."},{"path":"https://r-talk.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Oscar Kjell. Author, maintainer. Adithya Ganesan. Author. Rajath Rao. Author. Akshay Raghavan. Author.","code":""},{"path":"https://r-talk.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kjell O, Giorgi S, Schwartz HA (2023). “talk-package.” Psychological Methods. doi:10.1037/met0000542, https://osf.io/preprints/psyarxiv/293kt/.","code":"@Article{,   title = {The talk-package},   author = {Oscar Kjell and Salvatore Giorgi and H. Andrew Schwartz},   journal = {Psychological Methods},   doi = {10.1037/met0000542},   year = {2023},   url = {https://osf.io/preprints/psyarxiv/293kt/}, }"},{"path":"https://r-talk.org/index.html","id":"text-","dir":"","previous_headings":"","what":"talk","title":"talk","text":"R-package analyzing natural language transformers HuggingFace using Natural Language Processing Machine Learning. text-package two main objectives: First, serve R-users point solution transforming text state---art word embeddings ready used downstream tasks. package provides user-friendly link language models based transformers Hugging Face. Second, serve end--end solution provides state---art AI techniques tailored social behavioral scientists. Modular End--End Solution Text created collaboration psychology computer science address research needs ensure state---art techniques. provides powerful functions tailored test research hypotheses social behavior sciences relatively small large datasets. Text continuously tested Ubuntu, Mac OS Windows using latest stable R version. Please reference tutorial article using package: text-package: R-package Analyzing Visualizing Human Language Using Natural Language Processing Deep Learning.","code":""},{"path":"https://r-talk.org/index.html","id":"short-installation-guide","dir":"","previous_headings":"","what":"Short installation guide","title":"talk","text":"users simply need run installation code. experiencing problems want alternatives, please see Extended Installation Guide. text-package work, first install text-package R, make work text required python packages. Install text-version (moment second step works using development version text GitHub). GitHub development version: CRAN version: Install initialize text required python packages:","code":"# install.packages(\"devtools\") devtools::install_github(\"oscarkjell/text\") install.packages(\"text\") library(text)  # Install text required python packages in a conda environment (with defaults). textrpp_install()  # Initialize the installed conda environment. # save_profile = TRUE saves the settings so that you don't have to run textrpp_initialize() after restarting R.  textrpp_initialize(save_profile = TRUE)"},{"path":"https://r-talk.org/index.html","id":"point-solution-for-transforming-text-to-embeddings","dir":"","previous_headings":"","what":"Point solution for transforming text to embeddings","title":"talk","text":"Recent significant advances NLP research resulted improved representations human language (.e., language models). language models produced big performance gains tasks related understanding human language. Text making SOTA models easily accessible interface HuggingFace Python. Text provides many contemporary state---art language models based deep learning model word order context. Multilingual language models can also represent several languages; multilingual BERT comprises 104 different languages. Table 1. available language models See HuggingFace comprehensive list models. textEmbed() function main embedding function text; can output contextualized embeddings tokens (.e., embeddings single word instance text) texts (.e., single embeddings per text taken aggregating token embeddings text). See Get Started information.","code":"library(text) # Transform the text data to BERT word embeddings  # Example text texts <- c(\"I feel great!\")  # Defaults embeddings <- textEmbed(texts) embeddings"},{"path":"https://r-talk.org/index.html","id":"language-analysis-tasks","dir":"","previous_headings":"","what":"Language Analysis Tasks","title":"talk","text":"also possible access many language analysis tasks textClassify(), textGeneration(), textTranslate(). full list language analysis tasks supported text see References","code":"library(text)  # Generate text from the prompt \"I am happy to\" generated_text <- textGeneration(\"I am happy to\",                                  model = \"gpt2\") generated_text"},{"path":"https://r-talk.org/index.html","id":"an-end-to-end-package","dir":"","previous_headings":"","what":"An end-to-end package","title":"talk","text":"Text also provides functions analyse word embeddings well-tested machine learning algorithms statistics. focus analyze visualize text, relation text numerical variables. example, textTrain() function used examine well word embeddings text can predict numeric categorical variable. Another example functions plotting statistically significant words word embedding space.  M","code":"library(text)  # Use data (DP_projections_HILS_SWLS_100) that have been pre-processed with the textProjectionData function; the preprocessed test-data included in the package is called: DP_projections_HILS_SWLS_100 plot_projection <- textProjectionPlot(   word_data = DP_projections_HILS_SWLS_100,   y_axes = TRUE,   title_top = \" Supervised Bicentroid Projection of Harmony in life words\",   x_axes_label = \"Low vs. High HILS score\",   y_axes_label = \"Low vs. High SWLS score\",   position_jitter_hight = 0.5,   position_jitter_width = 0.8 ) plot_projection$final_plot"},{"path":"https://r-talk.org/reference/find_talkrpp_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Find talk required python packages env — find_talkrpp_env","title":"Find talk required python packages env — find_talkrpp_env","text":"check whether conda/virtual environment talk required python pacakges exists","code":""},{"path":"https://r-talk.org/reference/find_talkrpp_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find talk required python packages env — find_talkrpp_env","text":"","code":"find_talkrpp_env()"},{"path":"https://r-talk.org/reference/talkEmbed.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform audio recordings to embeddings — talkEmbed","title":"Transform audio recordings to embeddings — talkEmbed","text":"Transform audio recordings embeddings","code":""},{"path":"https://r-talk.org/reference/talkEmbed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform audio recordings to embeddings — talkEmbed","text":"","code":"talkEmbed(   talk_filepaths,   model = \"openai/whisper-small\",   audio_transcriptions = \"None\",   use_decoder = FALSE,   tokenizer_parallelism = FALSE,   model_max_length = \"None\",   device = \"cpu\",   hg_gated = FALSE,   hg_token = \"\",   trust_remote_code = FALSE,   logging_level = \"warning\" )"},{"path":"https://r-talk.org/reference/talkEmbed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform audio recordings to embeddings — talkEmbed","text":"talk_filepaths (string) path video file (.wav/) list audio filepaths, embedded separately model shortcut name Hugging Face pretained model. Full list https://huggingface.co/transformers/pretrained_models.html audio_transcriptions (strings) audio_transcriptions : list (optional) list audio transcriptions, used Whisper's decoder-based embeddings use_decoder (boolean) whether use Whisper's decoder last hidden state representation (Note: audio_transcriptions must provided option set true) tokenizer_parallelism (boolean) whether use device parallelization tokenization. model_max_length (integer) maximum length tokenized text device (string) name device: 'cpu', 'gpu', 'gpu:k' k specific device number hg_gated (boolean) set True model gated hg_token (string) token access gated model got huggingface website trust_remote_code (boolean) use model custom code Huggingface Hub. logging_level (string) Set logging level, options: \"critical\", \"error\", \"warning\", \"info\", \"debug\".","code":""},{"path":"https://r-talk.org/reference/talkEmbed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform audio recordings to embeddings — talkEmbed","text":"tibble embeddings.","code":""},{"path":[]},{"path":"https://r-talk.org/reference/talkEmbed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform audio recordings to embeddings — talkEmbed","text":"","code":"# Transform audio recordings in the example dataset: # voice_data (included in talk-package), to embeddings. if (FALSE) { # \\dontrun{  } # }"},{"path":"https://r-talk.org/reference/talkText.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform audio recordings to embeddings — talkText","title":"Transform audio recordings to embeddings — talkText","text":"Transform audio recordings embeddings","code":""},{"path":"https://r-talk.org/reference/talkText.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform audio recordings to embeddings — talkText","text":"","code":"talkText(   talk_filepaths = talk_filepaths,   model = \"openai/whisper-small\",   device = \"cpu\",   tokenizer_parallelism = FALSE,   hg_gated = FALSE,   hg_token = \"\",   trust_remote_code = FALSE,   logging_level = \"warning\" )"},{"path":"https://r-talk.org/reference/talkText.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform audio recordings to embeddings — talkText","text":"talk_filepaths (string) Path video file (.wav/) list audio filepaths, embedded separately model shortcut name Hugging Face pretained model. Full list https://huggingface.co/transformers/pretrained_models.html device (string) name device: 'cpu', 'gpu', 'gpu:k' k specific device number tokenizer_parallelism (boolean) whether use device parallelization tokenization. hg_gated (boolean) Set True model gated hg_token (string) token access gated model got huggingface website trust_remote_code (boolean) use model custom code Huggingface Hub. logging_level (string) Set logging level, options: \"critical\", \"error\", \"warning\", \"info\", \"debug\".","code":""},{"path":"https://r-talk.org/reference/talkText.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform audio recordings to embeddings — talkText","text":"tibble transcriptions.","code":""},{"path":[]},{"path":"https://r-talk.org/reference/talkText.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform audio recordings to embeddings — talkText","text":"","code":"# Transform audio recordings in text: # voice_data (included in talk-package), to embeddings. if (FALSE) { # \\dontrun{  } # }"},{"path":"https://r-talk.org/reference/talkrpp_initialize.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize talk required python packages — talkrpp_initialize","title":"Initialize talk required python packages — talkrpp_initialize","text":"Initialize talk required python packages call R.","code":""},{"path":"https://r-talk.org/reference/talkrpp_initialize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize talk required python packages — talkrpp_initialize","text":"","code":"talkrpp_initialize(   python_executable = NULL,   virtualenv = NULL,   condaenv = \"talkrpp_condaenv\",   ask = FALSE,   refresh_settings = FALSE,   save_profile = FALSE,   check_env = TRUE,   talkEmbed_test = FALSE,   prompt = TRUE )"},{"path":"https://r-talk.org/reference/talkrpp_initialize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize talk required python packages — talkrpp_initialize","text":"python_executable full path Python executable, talk required python packages installed. virtualenv set path Python virtual environment talk required python packages installed Example: virtualenv = \"~/myenv\" condaenv set path anaconda virtual environment talk required python packages installed Example: condalenv = \"myenv\" ask logical; FALSE, use first talk required python packages installation found; TRUE, list available talk required python packages installations prompt user use. another (e.g. python_executable) set, value always treated FALSE. refresh_settings logical; TRUE, talk ignore saved settings profile initiate search new settings. save_profile logical; TRUE, current talk required python packages setting saved future use. check_env logical; check whether conda/virtual environment generated talkrpp_install() exists talkEmbed_test logical; Test whether function (talkEmbed) requires python packages works. prompt logical; asking whether user wants set environment default.","code":""},{"path":"https://r-talk.org/reference/talkrpp_install.html","id":null,"dir":"Reference","previous_headings":"","what":"Install talk required python packages in conda or virtualenv environment — talkrpp_install","title":"Install talk required python packages in conda or virtualenv environment — talkrpp_install","text":"Install talk required python packages (rpp) self-contained environment. macOS Linux-based systems, also install Python via \"miniconda\" environment,   talkrpp_install.  Alternatively, existing conda installation may   used, specifying path.  default setting \"auto\"   locate use existing installation automatically, download   install one none exists. Windows, automatic installation miniconda installation currently   available, user need install   miniconda    (Anaconda) manually. wish install Python \"virtualenv\", use   talkrpp_install_virtualenv function. requires python version   path (\"/usr/local/bin/python3.9\" Mac Linux.).","code":""},{"path":"https://r-talk.org/reference/talkrpp_install.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install talk required python packages in conda or virtualenv environment — talkrpp_install","text":"","code":"talkrpp_install(   conda = \"auto\",   update_conda = FALSE,   force_conda = FALSE,   rpp_version = \"rpp_version_system_specific_defaults\",   python_version = \"python_version_system_specific_defaults\",   envname = \"talkrpp_condaenv\",   pip = TRUE,   python_path = NULL,   prompt = TRUE )  talkrpp_install_virtualenv(   rpp_version = c(\"torch==2.0.0\", \"transformers==4.19.2\", \"numpy\", \"pandas\", \"nltk\"),   python_path = NULL,   pip_version = NULL,   bin = \"python3\",   envname = \"talkrpp_virtualenv\",   prompt = TRUE )"},{"path":"https://r-talk.org/reference/talkrpp_install.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install talk required python packages in conda or virtualenv environment — talkrpp_install","text":"conda character; path conda executable. Default \"auto\" automatically find path update_conda Boolean; update latest version Miniconda install? (combined force_conda = TRUE) force_conda Boolean; force re-installation Miniconda already installed requested path? rpp_version character; default \"rpp_version_system_specific_defaults\", diffent systems require different combinations python version packages. also possible specify , c(\"torch==2.0.0\", \"transformers==4.19.2\", \"numpy\", \"pandas\", \"nltk\", \"scikit-learn\", \"datasets\", \"evaluate\"). python_version character; default \"python_version_system_specific_defaults\". can specify Python version condaenv .   installation. envname character; name conda-environment install talk required python packages. Default \"talkrpp_condaenv\". pip TRUE use pip installing rpp FALSE, conda package manager conda-forge channel used installing rpp. python_path character; path Python virtualenvironment installation prompt logical; ask whether proceed installation pip_version character; bin character; e.g., \"python\", virtualenvironment installation","code":""},{"path":"https://r-talk.org/reference/talkrpp_install.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install talk required python packages in conda or virtualenv environment — talkrpp_install","text":"","code":"if (FALSE) { # \\dontrun{ # install talk required python packages in a miniconda environment (macOS and Linux) talkrpp_install(prompt = FALSE)  # install talk required python packages to an existing conda environment talkrpp_install(conda = \"~/anaconda/bin/\") } # } if (FALSE) { # \\dontrun{ # install talk required python packages in a virtual environment talkrpp_install_virtualenv() } # }"},{"path":"https://r-talk.org/reference/talkrpp_uninstall.html","id":null,"dir":"Reference","previous_headings":"","what":"Uninstall talkrpp conda environment — talkrpp_uninstall","title":"Uninstall talkrpp conda environment — talkrpp_uninstall","text":"Removes conda environment created talkrpp_install()","code":""},{"path":"https://r-talk.org/reference/talkrpp_uninstall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uninstall talkrpp conda environment — talkrpp_uninstall","text":"","code":"talkrpp_uninstall(conda = \"auto\", prompt = TRUE, envname = \"talkrpp_condaenv\")"},{"path":"https://r-talk.org/reference/talkrpp_uninstall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uninstall talkrpp conda environment — talkrpp_uninstall","text":"conda path conda executable, default \"auto\" automatically finds path prompt logical; ask whether proceed installation envname character; name conda environment remove","code":""}]
