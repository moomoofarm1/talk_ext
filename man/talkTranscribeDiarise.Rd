% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/3_1_talkTranscribeDiarise.R
\name{talkTranscribeDiarise}
\alias{talkTranscribeDiarise}
\title{Transcribe and Diarize Audio Recordings}
\usage{
talkTranscribeDiarise(
  audio = NULL,
  output_dir = getwd(),
  model = "medium.en",
  stemming = TRUE,
  suppress_numerals = FALSE,
  batch_size = 8,
  max_retries = 1,
  max_oom_retries = 2,
  language = NULL,
  rerun_completed_audio_file = FALSE,
  diarize_worker = TRUE,
  temp_dir = getwd()
)
}
\arguments{
\item{audio}{(string or list) Path to a single audio file (e.g., `.wav`) or a list of file paths. Each file is processed separately.}

\item{output_dir}{(string) Directory where output files (transcripts, speaker-labeled files) will be saved. If NULL, uses a temp directory.}

\item{model}{(string) Name of the Whisper model to use (e.g., `"medium.en"`). Available models include `tiny`, `base`, `small`, `medium`, `large`.}

\item{stemming}{(logical) If TRUE, words will be stemmed in the output.}

\item{suppress_numerals}{(logical) If TRUE, numerals will be removed from the transcript.}

\item{batch_size}{(integer) Number of audio segments to process at once. Useful for large files or GPU acceleration. Default is 8.}

\item{max_retries}{(integer) Maximum number of retries for failed decoding attempts. Default is 1.}

\item{max_oom_retries}{(integer) Maximum number of retries if a CUDA out-of-memory error occurs.}

\item{language}{(string) Language code (e.g., `"en"`, `"sv"`). If NULL, Whisper will attempt to detect the language.}

\item{rerun_completed_audio_file}{(logical) If TRUE, forces rerun even if output already exists.}

\item{diarize_worker}{(logical) If TRUE, enables speaker diarization using NeMo. Requires NeMo and related dependencies.}

\item{temp_dir}{(string) Optional path to temporary directory for intermediate files.}
}
\value{
Nothing returned. Output files (e.g., transcripts and diarization CSVs) are written to `output_dir`.
}
\description{
This function transcribes one or more audio recordings using Whisper and optionally performs speaker diarization using NeMo.
It is intended for converting speech audio into text and, if enabled, assigning speaker labels to segments.
}
\details{
The function internally uses Python libraries through `reticulate`. It selects `"cuda"` if a GPU is available and properly configured;
otherwise it defaults to `"cpu"`. You can retrieve and parse output files manually from the specified `output_dir`.
}
\examples{
\dontrun{
wav_path <- system.file("extdata", "test_short.wav", package = "talk")
talk::talkTranscribeDiarise(audio = wav_path)
}

}
\seealso{
\code{\link{talkEmbed}}, \code{\link{talkText}}, \code{\link{talkrpp_initialize}}
}
